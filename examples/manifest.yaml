# Example OpenMesh manifest for an MCP code analysis server
version: "0.1"
name: "code-analyzer-mcp"
description: "AI-powered code analysis and refactoring tools via MCP"

# MCP server configuration
mcp:
  server_url: "https://analyzer.example.com/mcp"
  transport: "http"
  version: "1.0.0"

# Tools auto-discovered from MCP server
# These are populated automatically via 'openmesh init --mcp'
tools:
  - name: "analyze_complexity"
    description: "Analyze code complexity and provide improvement suggestions"
    pricing: 0.001
  
  - name: "format_code"
    description: "Format code using AI-powered style detection"
    pricing: 0.0005
  
  - name: "find_bugs"
    description: "Detect potential bugs and security issues"
    pricing: 0.002
  
  - name: "suggest_refactor"
    description: "Suggest refactoring opportunities"
    pricing: 0.001
  
  - name: "generate_tests"
    description: "Generate unit tests for functions"
    pricing: 0.003

# Resources provided by the MCP server
resources:
  - uri: "code://project/*"
    description: "Access to project source code"
  - uri: "ast://analysis/*"
    description: "Abstract syntax tree analysis results"

# Payment configuration
pricing:
  model: "per_tool"
  default: 0.001
  currency: "usdc"

payment:
  rail: "x402"
  address: "0x742d35Cc6634C0532925a3b844Bc9e7595f7E8e"
  chain: "base"

# Performance characteristics
performance:
  latency_p50: 150
  latency_p99: 400
  throughput: 1000
  regions: ["us-east-1", "eu-central-1", "ap-southeast-1"]

# Additional metadata
author: "alice@codetools.dev"
repository: "https://github.com/codetools/analyzer-mcp"
documentation: "https://docs.codetools.dev/mcp"
license: "MIT"